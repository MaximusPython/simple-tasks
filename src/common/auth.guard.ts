import { Request, Response, NextFunction } from 'express';
import { IMiddleware } from './middleware.interface';

export class AuthGuard implements IMiddleware {
	execute(req: Request, res: Response, next: NextFunction): void {
		if (req.user) {
			// если в req есть user то мы идем next
			return next();
		}
		res.status(401).send({ error: 'Вы не авторизованы' });
	}
}

// guard блокирует запрос в отличие от middleware

// Guard:

// Guard будет использоваться для проверки авторизации пользователя перед доступом к контроллерам
// Создание файла auth.guard.ts
// Реализация проверки наличия request.user, если нет - возврат ошибки с кодом 401
// 3. Добавление Guard к контроллеру:

// В контроллере добавить созданный guard в соответствующий route для ограничения доступа
// 4. Функция getInfo для получения данных пользователя:

// Дополнить сервис UserService методом getUserInfo
// Метод принимает email, возвращает данные пользователя или null
// В контроллере реализовать логику использования getUserInfo для отправки данных о пользователе при успешной авторизации
// Важные моменты:

// В случае использования асинхронных функций всегда обращать внимание на корректный вызов next() чтобы избежать ошибок
// Guard блокирует доступ к роутам для неавторизованных пользователей
// В случае отсутствия пользователя в базе данных, важно корректно обработать эту ситуацию и отправить соответствующий ответ клиенту
